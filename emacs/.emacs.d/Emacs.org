#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
* Contents :TOC:QUOTE:
#+BEGIN_QUOTE
- [[#early-init][Early-Init]]
  - [[#cache-e-directory-di-supporto][Cache e directory di supporto]]
  - [[#garbage-collector-e-warnings][Garbage collector e warnings]]
  - [[#ui-tweaks][UI tweaks]]
  - [[#startup-speedup][Startup speedup]]
- [[#emacs-literate-config-file][Emacs literate config file]]
- [[#startup-config][Startup config]]
  - [[#loading-time][Loading time]]
  - [[#configurazione-package-manager][Configurazione package manager]]
  - [[#pulizia-cartella-emacsd][Pulizia cartella .emacs.d]]
  - [[#garbage-collection][Garbage collection]]
  - [[#package-updates][Package updates]]
- [[#main-config][Main config]]
- [[#ui][UI]]
  - [[#tema][Tema]]
  - [[#modeline][Modeline]]
  - [[#parentesi][Parentesi]]
- [[#evil][Evil]]
  - [[#evil-undo][Evil-undo]]
  - [[#evil][Evil]]
  - [[#evil-collection-e-setup][Evil-collection e setup]]
  - [[#folding][Folding]]
- [[#keybinds][Keybinds]]
  - [[#general-el-keybinds-con-prefisso][General-el: keybinds con prefisso]]
  - [[#transient-keybinds-con-menu][Transient: keybinds con menu]]
- [[#formattazione-e-pulizia-file][Formattazione e pulizia file]]
  - [[#testo][Testo]]
  - [[#specifico-per-estensione][Specifico per estensione]]
- [[#completion-frameworks][Completion frameworks]]
  - [[#vertico][Vertico]]
- [[#org-mode][Org mode]]
  - [[#funzioni-per-lagenda-con-org-roam][Funzioni per l'agenda con org-roam]]
  - [[#org-package][Org package]]
  - [[#super-agenda][Super agenda]]
  - [[#table-of-contents][Table-of-contents]]
  - [[#ui][UI]]
- [[#org-roam][Org roam]]
  - [[#funzioni-di-appoggio][Funzioni di appoggio]]
  - [[#configurazione][Configurazione]]
- [[#variabili-locali][Variabili locali]]
#+END_QUOTE

* Early-Init
Configurazioni da caricare il prima possibile nel file early-init.el
#+begin_src emacs-lisp :tangle early-init.el
;;; -*- lexical-binding: t; -*-
; File generato automaticamente da emacs.org
#+end_src
** Cache e directory di supporto
Istruzioni trovate nel README del package no-littering
#+begin_src emacs-lisp :tangle early-init.el
(setq user-emacs-directory "~/.cache/emacs")
(setq package-user-dir "~/.cache/emacs/packages")

(when (fboundp 'startup-redirect-eln-cache)
  (startup-redirect-eln-cache
   (convert-standard-filename
	  (expand-file-name  "var/eln-cache/" user-emacs-directory))))
#+end_src
** Garbage collector e warnings
#+begin_src emacs-lisp :tangle early-init.el
;; Meno warnings
(setq comp-async-report-warnings-errors nil)

;; Garbage collector
(setq gc-cons-threshold most-positive-fixnum
    gc-cons-percentage 0.6)
#+end_src
** UI tweaks
#+begin_src emacs-lisp :tangle early-init.el
;; UI
(push '(menu-bar-lines .0) default-frame-alist)
(push '(tool-bar-lines .0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
(push '(mode-line-format . 0) default-frame-alist)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
#+end_src
** Startup speedup
#+begin_src emacs-lisp :tangle early-init.el
;; Fast-startup
(setq package-enable-at-startup nil)
(setq package-quickstart t)
(setq frame-inhibit-implied-resize t)
(advice-add #'x-apply-session-resources :override #'ignore)
#+end_src

* Emacs literate config file
Una prova di un file di configurazione letterale
#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
;; File generato automaticamente, cambiare il emacs.org
#+end_src

* Startup config
** Loading time
Funzione per riportare il tempo di load
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
	  (lambda ()
	    (message "!!! Emacs loader in %s with %d garbage collections."
		     (format "%.3f seconds"
			     (float-time
			      (time-subtract after-init-time before-init-time)))
		     gcs-done)))
#+end_src
** Configurazione package manager
Init delle sorgenti per i packages e di package in generale
#+begin_src emacs-lisp
;; Initialize package sources
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
;; Initialize use-package
(package-initialize)
#+end_src

Init e configurazione di use-package 
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))
;; Configurazione use-package
(eval-and-compile
   (setq use-package-always-ensure nil)
   (setq use-package-always-defer nil)
   (setq use-package-always-demand nil)
   (setq use-package-expand-minimally nil)
   (setq use-package-enable-imenu-support t)
   (setq use-package-compute-statistics nil)
   (setq use-package-hook-name-suffix nil))
(eval-when-compile
        (require 'use-package))
#+end_src
** Pulizia cartella .emacs.d
Packages per mantenere la cartella .emacs.d pulita ed installare tutto nella .cache
#+begin_src emacs-lisp
(use-package no-littering
  :ensure
  :config
  (setq auto-save-file-name-transforms
	`((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
  )
#+end_src
** Garbage collection
#+begin_src emacs-lisp
(use-package gcmh
  :ensure t
  :custom
  (gcmh-mode 1)
  (gcmh-idle-delay 5)
  (gcmh-high-cons-threshold (* 16 1024 1024))
  (gc-cons-percentage 0.1))
#+end_src
** Package updates
Tiene sepre tutto aggiornato
#+begin_src emacs-lisp
(use-package auto-package-update
  :ensure t
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src
* Main config
Setup generale di emacs
#+begin_src emacs-lisp
(use-package emacs
  :init
  (set-face-attribute 'default nil :height 180) ;; Font
  (set-face-attribute 'fixed-pitch nil :height 180) ;; Font
  (set-face-attribute 'variable-pitch nil :height 180) ;; Font
  ;; Vertico setup
  (setq enable-recursive-minibuffers t)
  :config
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8-unix)
  (setq-default frame-title-format '("%b"))
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit) ;; TODO Separare il keybind
  (global-display-line-numbers-mode)
  ;;(server-start)
  :custom
  (inhibit-startup-screen t)
  (initial-scratch-message "")
  (use-short-answer t)
  (read-process-output-max (* 1024 1024))
  ;;(user-emacs-directory "~/.cache/emacs")
  (tramp-default-method "ssh")
  (vc-follow-symlinks t)
  (delete-old-versions -1) ;; Avoid excessive backups
  (version-control t)
  (vc-make-backup-files t)
  )
#+end_src
* UI
** Tema
Basato su doom per il momento
#+begin_src emacs-lisp
;;;; Tema
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-one t)
  (doom-themes-neotree-config)
  (doom-themes-org-config))
#+end_src

** Modeline
#+begin_src emacs-lisp
;; Modeline
(use-package doom-modeline
  :ensure t
  :init
  (doom-modeline-mode 1)
  )
#+end_src
** Parentesi
Colora le parentesi
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode-hook . rainbow-delimiters-mode))
#+end_src
* Evil 
** Evil-undo
Da caricare prima di evil per avere una funzione di undo avanzata
#+begin_src emacs-lisp
(use-package undo-fu
  :after emacs
  :ensure
  :init
  )
(use-package undo-fu-session
  :after undo-fu
  :defer 1
  :ensure
  :config
  (setq undo-fu-session-file-limit 1024)
  (global-undo-fu-session-mode 1)
  )
#+end_src
** Evil
#+begin_src emacs-lisp
;; Evil config
(use-package evil
  :ensure
  :after undo-fu
  :init	
  ;; Vim-like
  (general-evil-setup)
  ;; Spostamenti
  (setq evil-want-integration t) ;; TODO: Capire cosa fa
  (setq evil-want-keybinding nil) ;; TODO: Capire cosa fa
  (setq evil-want-C-i-jump t)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-u-delete t)
  ;; Search
  (setq evil-search-module 'evil-search)
  ;; Indentazione
  (setq evil-shift-width 4) ;; Questo e' il default
  ;; Undo-Redo
  (setq evil-undo-system 'undo-fu)
  :config
  (evil-mode 1)
  :custom
  (evil-vsplit-window-right t)
  )
#+end_src
** Evil-collection e setup
Un package che aggiunge keybinds basati su evil per multipli altri packages
#+begin_src emacs-lisp
(use-package evil-collection
  :ensure
  :after evil
  :init
  :custom
  (collection-setup-minibuffer t)
  (evil-collection-calendar-want-org-bindings t)
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (evil-collection-init)
  )
#+end_src
** Folding
#+begin_src emacs-lisp
;; Folding
(use-package vimish-fold
  :ensure t
  :defer 2
  :after evil)

(use-package evil-vimish-fold
  :ensure t
  :after vimish-fold
  :init
  (setq evil-vimish-fold-mode-lighter " ")
  (setq evil-vimish-fold-target-modes '(prog-mode conf-mode text-mode))
  :config
  (global-evil-vimish-fold-mode)
 )
#+end_src

* Keybinds
** General-el: keybinds con prefisso
Aggiunge keybinds con prefisso e vari hook, disattivato per il momento
#+begin_src emacs-lisp 

(use-package general
  :ensure t
  :after evil
  :config
  (general-define-key
   :states '(normal visual insert emacs)
   :prefix "SPC"
   :non-normal-prefix "C-SPC"
    "c" '((lambda () (interactive) (find-file user-init-file)) :which-key "Open Configuration")
    "a" '(org-agenda :which-key "Agenda")
    "SPC" '(find-file :which-key "Find file")
    ;; Buffers
    "b" '(:ignore t :which-key "Buffers")
    "be" '(eval-buffer :which-key "Eval")
    ;;"o" '(:ignore t :which-key "Org")
    ;;"oa" '(org-agenda :which-key "Agenda")
    ))
#+end_src
Which-key permette di mostrare in un menu ogni keybind, da rivedere
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :after general
  :config
  (which-key-mode)
)
#+end_src

** Transient: keybinds con menu
Alternativa complessa a general, in fase di test, disabilitata per ora
#+begin_src emacs-lisp :tangle no
(use-package transient
  :ensure t
  :after evil
  :config
  (define-transient-command org-roam-transient ()
    "Buffers"
    ["Suffixes"
     ("i" "Insert" org-roam-node-insert :transient nil)
     ("o" "Open" org-roam-node-open :transient nil)
     ("f" "Find" org-roam-node-find :transient nil)
    ])
  (define-transient-command org-transient ()
    ["Suffixes"
     ("c" "Cycle" org-cycle :transient nil)
    ])
  (define-transient-command buffers-transient ()
    "Buffers"
    ["Suffixes"
     ("e" "Eval" eval-buffer :transient nil)]
    )
  (define-transient-command general-transient ()
    "Main Menu"
    ["Suffixes"
     ("a" "Agenda" org-agenda :transient nil)
     ("c" "Config" (lambda () (interactive) (find-file "~/.emacs.d/Emacs.org")) :transient nil)
     ("SPC" "Find file" find-file :transient nil)]
    ["Nested"
     ("b" "Buffer" buffers-transient)
     ("o" "Org" org-transient)]
    ) 
  (define-key evil-insert-state-map (kbd "C-SPC") 'general-transient)
  (define-key evil-normal-state-map (kbd "SPC") 'general-transient) ;; TODO Kill the buffer with ESC
)
#+end_src
* Formattazione e pulizia file
** Testo
Rimozione di righe vuote e spazi bianchi finali
#+begin_src emacs-lisp
(use-package ws-butler
  :ensure t
  :defer 1
  :custom
  (ws-butler-mode 1)
)
#+end_src
** Specifico per estensione
Package che richiede l'installazione di vari strumenti per la formattazione
#+begin_src emacs-lisp
(use-package format-all
  :disabled
  :ensure
  :init
  ;; TODO Aggiungere un keybind per Black
  )
#+end_src
* Completion frameworks
** Vertico
Moduli del framework vertico che ho attivato
*** Vertico 
Modulo di base del framework e package per salvare comandi precedenti
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :custom
  (vertico-cycle t)
  ;;:custom-face
  ;;(vertico-current ((t (:background "#3a3f5a"))))
  :init
  (vertico-mode))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))
#+end_src
*** Altri
Ancora da attivare e settare
#+begin_src emacs-lisp
;; Da attivare piano piano
;;(use-package orderless  :ensure t)
;;(use-package marginalia  :ensure t)
;;(use-package embark  :ensure t)
;;(use-package consult  :ensure t)
;;(use-package embark-consult  :ensure t)
#+end_src
* Org mode
** Funzioni per l'agenda con org-roam
Permettono di selezionare solo i file org con TODO inseriti
#+begin_src emacs-lisp
(defun my/agenda-fetch ()
  ;; 1. Se voglio aggiungere una task ad un file nuovo?!
  ;; 2. Se non ne trova non parte l'agenda
  ;;(interactive)
  (split-string 
   (shell-command-to-string (concat "rg --type org '" locregex "' " org-agenda-base " -l "))
   "\n")
   )
(defun my/update-agenda (&rest _)
  ;;(interactive)
  (setq org-agenda-files (my/agenda-fetch)))
#+end_src
** Org package
Unico blocco diviso in più sezioni
*** Init
Evita di caricare allo startup org
#+begin_src emacs-lisp
(use-package org
  :ensure t
  ;;:defer t
  :commands (org-capture org-agenda)
  :hook (org-mode . (lambda()
			(org-indent-mode)
			(fill-column 80)
			(auto-fill-mode 1)
			(org-src-tab-acts-natively t)
			(evil-auto-indent nil)))
  
  :config
#+end_src
*** Agenda
Scritta per funzionare con org-roam, richiede settata la variabile ORG_PATH
#+begin_src emacs-lisp
  (setq string-todos '("TODO" "ACTIVE" "DONE" "HOLD" "CANCELED"))
  (setq locregex (string-join string-todos "|"))
  (setq org-agenda-base (getenv "ORG_PATH"))
  (setq org-agenda-files '(my/update-agenda))
  (setq org-todo-keywords
      '((sequence "TODO(t@)" "ACTIVE(a@)" "|" "DONE(d@)") ;; Generali
	(sequence  "|" "HOLD(h@)" "CANCELED(c@)")
	))
  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("note" . ?n)
       ("idea" . ?i)))
  (advice-add 'org-agenda :before #'my/update-agenda)
  (advice-add 'org-todo-list :before #'my/update-agenda)
#+end_src
*** Babel
Tangle di file e moduli aggiungtivi
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)))
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (setq org-src-tab-acts-natively t)
  (setq org-src-preserve-indentation t)
#+end_src

*** Fine org
#+begin_src emacs-lisp
)
#+end_src
** Super agenda
Una versione aggiornata che permette di raggruppare le entries.
#+begin_src emacs-lisp
(use-package org-super-agenda
  :ensure t
  :after org
  :init
  (setq org-super-agenda-header-map (make-sparse-keymap))
  :hook (org-agenda-mode . org-super-agenda-mode)
  ;;:config
  ;;(org-super-agenda-mode)
  )
#+end_src
** Table-of-contents
#+begin_src emacs-lisp
(use-package toc-org
  :ensure t
)
#+end_src
** UI
*** Colora i TODOs
Al momento non funzione nell'agenda.
#+begin_src emacs-lisp :tangle no
(use-package hl-todo
  :ensure t
  :after org
  :init
  :config
  (setq hl-todo-keyword-faces
	'(("TODO" . "#FF0000")
	  ("ACTIVE" . "#00fffe")
	  ("DONE" . "#00FF00")
	  ))
  (setq org-todo-keyword-faces hl-todo-keyword-faces)
  (hl-todo-mode)
  )
#+end_src
* Org roam
Mega modulo che richiede il suo header a parte.
** Funzioni di appoggio
Per il momento nulla.
** Configurazione
Momentaneamente disattivato, forse troppo scomodo
*** Init
#+begin_src emacs-lisp 
(use-package org-roam
  :ensure
  :demand t
  :defer 1
  :custom
  (org-roam-directory org-agenda-base)
  (org-roam-completion-everywhere t)
  (org-roam-completion-system 'default)
  (org-roam-dailies-directory "journals")
  :config
#+end_src
*** Config
#+begin_src emacs-lisp
  (require 'org-roam-dailies)
  (org-roam-db-autosync-mode))
#+end_src

* Variabili locali

Codice che abilitia il tangle-on-save e il reload di emacs quando si salva.
Richiedono autorizzazione la prima volta che vengono lette.
;; Local Variables: 
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t) 
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t) 
;; End:
